// обработка захардкожена

// Возвращает сведения о внешней обработке.
Функция СведенияОВнешнейОбработке() Экспорт
	
	ПараметрыРегистрации = СкидкиНаценкиСервер.ПараметрыРегистрацииВнешнейОбработкиСкидкиНаценки(
		НСтр("ru = 'Скидка 01.06.2023 TYBeanie'"),
		НСтр("ru = 'Скидка 01.06.2023 TYBeanie'"));
	ПараметрыРегистрации.БезопасныйРежим = Ложь;
	Возврат ПараметрыРегистрации;
	
КонецФункции

// Возвращает способ применения скидки (наценки)
//
// Возвращаемое значение:
//	Перечисления.СпособыПримененияСкидокНаценок - способ применения скидки (наценки)
//
Функция СпособПрименения() Экспорт
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает заголовок условия предоставления с учетом настроек
//
// Параметры:
//	Настройки - Структура - Значения настроек условия предоставления
//
// Возвращаемое значение:
//	Строка - Наименование условия
//
Функция Автонаименование(Настройки) Экспорт
	
	Возврат НСтр("ru = 'Скидка 01.06.2023 TYBeanie'");
	
КонецФункции

// Возвращает имя формы внешней обработки,
// предназначенной для настройки условия предоставления 
//
// Возвращаемое значение:
//	Строка - Имя формы
//
Функция ИмяФормыНастроек() Экспорт
	
	Возврат "Настройки";
	
КонецФункции


// Возвращает расширенное описание условия предоставления с учетом настроек
//
// Параметры:
//	Настройки - Структура - Значения настроек условия предоставления
//
// Возвращаемое значение:
//	Строка - Расширенное описание
//
Функция ОписаниеДействия(Настройки) Экспорт
	
	Попытка
		Если Настройки <> Неопределено Тогда
			Описание = НСтр("ru = 'Скидка 01.06.2023 TYBeanie'");
		Иначе
			Описание = НСтр("ru = 'Не заданы настройки скидки'");
		КонецЕсли;
	Исключение
		Описание = НСтр("ru = 'Настройки не загружены.
		           |При загрузке настроек скидки произошла ошибка:
		           |'") + ОписаниеОшибки();
	КонецПопытки;
	
	Возврат Описание;
	
КонецФункции


// Выполняет расчет скидки (наценки)
//
// Параметры:
//	СкидкаНаценка - Строка дерева скидок (наценок). Включает результаты проверки условий, способы совместного применения
//	Настройки - Структура - Настройки, заданные пользователем в форме настроек внешней обработки
//	Товары - Коллекция товаров, для которых требуется применить скидку (наценку)
//	ПараметрыРасчета - Структура - Параметры расчета скидок (наценок)
//
// Возвращаемое значение:
//	РезультатРасчета - ТаблицаЗначений - результат расчета
//
Функция Рассчитать(СтрокаДереваСкидок, ПараметрыВнешнейОбработки, ПараметрыРасчета) Экспорт
	
	
	
	//Адрес = "\\tntapp5\hran\test\ПрочиеОбработки\СкидкаTYBeanie01_06_2023.epf";
	//обр = ВнешниеОбработки.Создать(Адрес, БезопасныйРежим());
	//обр.Рассчитать(СтрокаДереваСкидок, ПараметрыВнешнейОбработки, ПараметрыРасчета);
	//Возврат Неопределено;
	//Сообщить("AAA");
	
	// прежде чем делать скидку приводим таблицу товары к изначальному виду,
	// чтобы избежать неверного расчета при повторном нажатии на кнопку "Расчитать скидки"
	Для каждого СтрокаТовар Из ПараметрыРасчета.Товары Цикл
	
		СтрокаТовар.СуммаВсего = СтрокаТовар.Сумма;	
	
	КонецЦикла; 
	
	РезультатРасчета = Новый Структура;
	
	ТаблицаСкидок = СкидкиНаценкиСервер.ПустаяТаблицаСкидок();
	ТаблицаПодарков = СкидкиНаценкиСервер.ПустаяТаблицаПодарков();
	// 3 условие 	
	МассивАкционныхТоваров = Новый СписокЗначений;
	МассивАкционныхТоваров.Добавить("10945163");
	МассивАкционныхТоваров.Добавить("530283032");
	МассивАкционныхТоваров.Добавить("10975971");
	МассивАкционныхТоваров.Добавить("530303767");
	МассивАкционныхТоваров.Добавить("530301517");
	МассивАкционныхТоваров.Добавить("530301518");
	МассивАкционныхТоваров.Добавить("530303167");
	МассивАкционныхТоваров.Добавить("530300325");
	МассивАкционныхТоваров.Добавить("530301964");
	МассивАкционныхТоваров.Добавить("530301962");
	МассивАкционныхТоваров.Добавить("530303175");
	МассивАкционныхТоваров.Добавить("530303176");
	МассивАкционныхТоваров.Добавить("530303873");
	МассивАкционныхТоваров.Добавить("530303870");
	МассивАкционныхТоваров.Добавить("530303868");
	МассивАкционныхТоваров.Добавить("530303867");
	МассивАкционныхТоваров.Добавить("530304753");
	МассивАкционныхТоваров.Добавить("530303866");
	МассивАкционныхТоваров.Добавить("530303870");
	МассивАкционныхТоваров.Добавить("530294329");
	МассивАкционныхТоваров.Добавить("530297933");
	МассивАкционныхТоваров.Добавить("10959993");
	МассивАкционныхТоваров.Добавить("10975972");
	МассивАкционныхТоваров.Добавить("10943781");
	МассивАкционныхТоваров.Добавить("10961830");
	МассивАкционныхТоваров.Добавить("530282726");
	МассивАкционныхТоваров.Добавить("10970923");
	МассивАкционныхТоваров.Добавить("530288452");
	МассивАкционныхТоваров.Добавить("530282498");
	МассивАкционныхТоваров.Добавить("530288441");
	МассивАкционныхТоваров.Добавить("10975970");
	МассивАкционныхТоваров.Добавить("530296284");
	МассивАкционныхТоваров.Добавить("530296282");
	МассивАкционныхТоваров.Добавить("10969652");
	МассивАкционныхТоваров.Добавить("530296286");
	МассивАкционныхТоваров.Добавить("530282728");
	МассивАкционныхТоваров.Добавить("10969656");
	МассивАкционныхТоваров.Добавить("530294328");
	МассивАкционныхТоваров.Добавить("10975972");
	МассивАкционныхТоваров.Добавить("10945156");
	
	РезультатРасчета.Вставить("ТаблицаСкидок", ТаблицаСкидок);
	РезультатРасчета.Вставить("ТаблицаПодарков", ТаблицаПодарков);
	ВсеТовары = ПараметрыРасчета.Товары;
	ВсеТоварыСЗ = Новый СписокЗначений;
	ВсеТоварыСЗ.ЗагрузитьЗначения(ВсеТовары.ВыгрузитьКолонку("Номенклатура"));
		
	//ЗапросТест1 = Новый Запрос;
	//ЗапросТест1.Текст = "ВЫБРАТЬ
	//|	Номенклатура.Ссылка КАК Ссылка,
	//|	Номенклатура.Наименование КАК Наименование,
	//|	Номенклатура.Артикул КАК Артикул
	//|ИЗ
	//|	Справочник.Номенклатура КАК Номенклатура
	//|ГДЕ
	//|	Номенклатура.Ссылка В ИЕРАРХИИ (&ВсеТовары)
	//|";
	//ЗапросТест1.УстановитьПараметр("ВсеТовары", ВсеТоварыСЗ);
	//
	//РезТест1 = ЗапросТест1.Выполнить().Выгрузить();
	//

	//ЗапросТест2 = Новый Запрос;
	//ЗапросТест3 = Новый Запрос;
	//ЗапросТест4 = Новый Запрос;
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("МассивАкционныхТоваров", МассивАкционныхТоваров);
	Запрос.УстановитьПараметр("ВсеТовары", ВсеТовары);
	Запрос.УстановитьПараметр("ВсеТоварыСЗ", ВсеТоварыСЗ);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка,
	|	Номенклатура.Наименование КАК Наименование,
	|	Номенклатура.Артикул КАК Артикул
	|ПОМЕСТИТЬ НоменклатураБаза
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В ИЕРАРХИИ (&ВсеТоварыСЗ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.КлючСвязи КАК КлючСвязи,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Количество КАК Количество,
	|	Товары.Сумма КАК Сумма,
	|	Товары.СуммаВсего КАК СуммаВсего,
	|	Товары.Цена КАК Цена
	|ПОМЕСТИТЬ ТоварыДокумента
	|ИЗ
	|	&ВсеТовары КАК Товары
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыДокумента.КлючСвязи КАК КлючСвязи,
	|	ТоварыДокумента.Номенклатура КАК Номенклатура,
	|	НоменклатураБаза.Артикул КАК Артикул,
	|	ТоварыДокумента.Характеристика КАК Характеристика,
	|	ТоварыДокумента.Количество КАК Количество,
	|	ТоварыДокумента.Сумма КАК Сумма,
	|	ТоварыДокумента.СуммаВсего КАК СуммаВсего,
	|	ТоварыДокумента.Цена КАК Цена,
	|	НоменклатураБаза.Артикул В ИЕРАРХИИ (&МассивАкционныхТоваров) КАК АкционныйТовар
	|ИЗ
	|	ТоварыДокумента КАК ТоварыДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ НоменклатураБаза КАК НоменклатураБаза
	|		ПО ТоварыДокумента.Номенклатура = НоменклатураБаза.Ссылка";
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	// создаем новую тз, где отдельный товар = отдельная строка
	ПодробнаяТЗ = ПолучитьПодробнуюТЗ(ТЗ);
	
	
	
	// 4 условие
	КолвоСкидочныхТоваровНеАкц = ОпределитьКолвоСкидТоваровНеАкц(ПодробнаяТЗ);
	//КолвоСкидочныхТоваровАкц = ОпределитьКолвоСкидТоваровАкц(ПодробнаяТЗ);
	
	Если КолвоСкидочныхТоваровНеАкц <> 0 Тогда
		Для каждого СтрПТЗ Из ПодробнаяТЗ Цикл
			Если КолвоСкидочныхТоваровНеАкц <> 0 Тогда
				
				Если СтрПТЗ.АкционныйТовар Тогда
					
					НоваяСтрока = ТаблицаСкидок.Добавить();
					НоваяСтрока.СкидкаНаценка = СтрокаДереваСкидок.СкидкаНаценка;
					НоваяСтрока.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.ВнешняяОбработка;
					НоваяСтрока.РеквизитДопУпорядочивания = СтрокаДереваСкидок.РеквизитДопУпорядочивания;
					НоваяСтрока.КлючСвязи = СтрПТЗ.КлючСвязи;
					НоваяСтрока.Сумма = СтрПТЗ.Цена - 499;
					НоваяСтрока.СуммаВсехСкидок = НоваяСтрока.Сумма;
					КолвоСкидочныхТоваровНеАкц = КолвоСкидочныхТоваровНеАкц - 1;
					СтрПТЗ.УжеСоСкидкой = Истина;
					
				КонецЕсли;
				
			Иначе
				УстановитьСкидкиБезНеАкцТоваров(ПодробнаяТЗ, ТаблицаСкидок, СтрокаДереваСкидок);
				Прервать;
			КонецЕсли;  	
		КонецЦикла; 
	Иначе 	
		УстановитьСкидкиБезНеАкцТоваров(ПодробнаяТЗ, ТаблицаСкидок, СтрокаДереваСкидок);
	КонецЕсли; 
	
	//Для каждого СтрокаТЗ Из ТЗ Цикл
	//	Для Индекс = 0 По СтрокаТЗ.Количество - 1 Цикл
	//		Если СтрокаТЗ.АкционныйТовар И КолвоСкидочныхТоваровНеАкц <> 0 Тогда
	//			Если СтрокаТЗ.КолвоТоваровКоторыеМожноПуститьВАкцию <> 0 Тогда
	//				
	//				НоваяСтрока = ТаблицаСкидок.Добавить();
	//				НоваяСтрока.СкидкаНаценка = СтрокаДереваСкидок.СкидкаНаценка;
	//				НоваяСтрока.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.ВнешняяОбработка;
	//				НоваяСтрока.РеквизитДопУпорядочивания = СтрокаДереваСкидок.РеквизитДопУпорядочивания;
	//				НоваяСтрока.КлючСвязи = СтрокаТЗ.КлючСвязи;
	//				НоваяСтрока.Сумма = СтрокаТЗ.Цена - 499;
	//				НоваяСтрока.СуммаВсехСкидок = НоваяСтрока.Сумма;
	//				КолвоСкидочныхТоваровНеАкц = КолвоСкидочныхТоваровНеАкц - 1;
	//				СтрокаТЗ.КолвоТоваровКоторыеМожноПуститьВАкцию = СтрокаТЗ.КолвоТоваровКоторыеМожноПуститьВАкцию - 1;
	//				
	//			КонецЕсли; 
	//			//СтрокаТЗ.УжеСоСкидкой = Истина;
	//		КонецЕсли;
	//	КонецЦикла;
	//КонецЦикла; 
	//
	////КолвоСкидочныхТоваровАкц = ОпределитьКолвоСкидТоваровАкц(ТЗ);
	//
	//Для каждого СтрокаТЗ Из ТЗ Цикл
	//	СуммаТоваров = 0;
	//	Если СтрокаТЗ.АкционныйТовар И СтрокаТЗ.КолвоТоваровКоторыеМожноПуститьВАкцию <> 0 Тогда
	//		
	//		Для Индекс = 1 По СтрокаТЗ.КолвоТоваровКоторыеМожноПуститьВАкцию Цикл
	//			
	//			СуммаТоваров = СуммаТоваров + СтрокаТЗ.Цена;
	//			
	//			Если СуммаТоваров >= 1500 Тогда
	//				
	//				КолвоТоваровПодСкидку = Цел(СуммаТоваров / 1500);
	//				
	//				Для Товар = 1 По КолвоТоваровПодСкидку Цикл
	//					
	//					Если СтрокаТЗ.КолвоТоваровКоторыеМожноПуститьВАкцию > 1 Тогда
	//						
	//						НоваяСтрока = ТаблицаСкидок.Добавить();
	//						НоваяСтрока.СкидкаНаценка = СтрокаДереваСкидок.СкидкаНаценка;
	//						НоваяСтрока.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.ВнешняяОбработка;
	//						НоваяСтрока.РеквизитДопУпорядочивания = СтрокаДереваСкидок.РеквизитДопУпорядочивания;
	//						НоваяСтрока.КлючСвязи = СтрокаТЗ.КлючСвязи;
	//						НоваяСтрока.Сумма = СтрокаТЗ.Цена - 499;
	//						НоваяСтрока.СуммаВсехСкидок = НоваяСтрока.Сумма;
	//						СтрокаТЗ.КолвоТоваровКоторыеМожноПуститьВАкцию = СтрокаТЗ.КолвоТоваровКоторыеМожноПуститьВАкцию - 1;
	//						
	//					Иначе
	//						
	//						// Здесь найти следующий акционный товар 
	//						// и поставить метку, что он уже попал в акцию
	//						// и пропускать его в цикле
	//						// надо вывести все товары построчно (там где больше 1 товара, разделить на n строк)
	//						// и уже оттуда ставить скидки
	//						// думаю так будет проще и лучше
	//						
	//					КонецЕсли; 
	//					
	//				КонецЦикла; 
	//				
	//			КонецЕсли; 
	//			
	//		КонецЦикла; 	
	//		
	//	КонецЕсли; 	
	//	
	//КонецЦикла; 	
	// условие 5
	//ДопЗапрос = Новый Запрос;
	//
	//ДопЗапрос.УстановитьПараметр("МассивАкциозныхТоваров", МассивАкциозныхТоваров);
	//ДопЗапрос.УстановитьПараметр("ВсеТовары", ВсеТовары);
	//ДопЗапрос.УстановитьПараметр("ВсеТоварыСЗ", ВсеТоварыСЗ);
	//
	////подкорректировать запрос для 5 условия
	////и написать само условие предоставления скидки
	//
	//ДопЗапрос.Текст = Запрос.Текст;	
	//ДопТЗ = ДопЗапрос.Выполнить().Выгрузить();   МассивАкционныхТоваров
		
	//Для каждого СтрокаТЗ Из ТЗ Цикл
	//	Если СтрокаДопТЗ.АкциозныйТовар И СтрокаДопТЗ.Цена > 1500 И (СтрокаДопТЗ.СуммаВсего = СтрокаДопТЗ.Цена * СтрокаДопТЗ.Количество) Тогда
	//		Для Индекс = 0 По СтрокаДопТЗ.Количество - 1 Цикл
	//			Если КолвоСкидочныхТоваровАкц > 0 И КолвоАкциозныхТоваровБезСкидки > 1 Тогда	
	//			НоваяСтрока = ТаблицаСкидок.Добавить();
	//			НоваяСтрока.СкидкаНаценка = СтрокаДереваСкидок.СкидкаНаценка;
	//			НоваяСтрока.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.ВнешняяОбработка;
	//			НоваяСтрока.РеквизитДопУпорядочивания = СтрокаДереваСкидок.РеквизитДопУпорядочивания;
	//			НоваяСтрока.КлючСвязи = СтрокаТЗ.КлючСвязи;
	//			НоваяСтрока.Сумма = СтрокаТЗ.Цена - 499;
	//			НоваяСтрока.СуммаВсехСкидок = НоваяСтрока.Сумма;
	//			КолвоСкидочныхТоваровАкц = КолвоСкидочныхТоваровАкц - 1;	
	//			КонецЕсли; 	
	//		КонецЦикла; 	
	//	КонецЕсли; 
	//КонецЦикла;
	
	Если КолвоСкидочныхТоваровНеАкц <> 0 Тогда
	
		Сообщить("ВНИМАНИЕ: У покупателя имеется возможность купить игрушки (" + Строка(КолвоСкидочныхТоваровНеАкц) +  ") из коллекции TY Beanie за 499р.");	
	
	КонецЕсли; 
		
	Возврат РезультатРасчета;
	
КонецФункции 

Функция ПолучитьПодробнуюТЗ(ИсходнаяТЗ)

	ПодробнаяТЗ = Новый ТаблицаЗначений;
	
	Для Индекс = 0 По ИсходнаяТЗ.Колонки.Количество() - 1 Цикл
		ПодробнаяТЗ.Колонки.Добавить(ИсходнаяТЗ.Колонки[Индекс].Имя, ИсходнаяТЗ.Колонки[Индекс].ТипЗначения);	
	КонецЦикла; 
	
	ПодробнаяТЗ.Колонки.Добавить("УжеСоСкидкой", Новый ОписаниеТипов("Булево"));
	ПодробнаяТЗ.Колонки.Добавить("АкцТоварУсловиеСкидки", Новый ОписаниеТипов("Булево"));
	ПодробнаяТЗ.Колонки.Добавить("ЧастьУсловияСкидкиСтрока", Новый ОписаниеТипов("Строка"));
	
	Для каждого СтрИТЗ Из ИсходнаяТЗ Цикл
	
		Для ЕдиницаТовара = 1 По СтрИТЗ.Количество Цикл
		
			СтрПТЗ = ПодробнаяТЗ.Добавить();	
			СтрПТЗ.КлючСвязи = СтрИТЗ.КлючСвязи;
			СтрПТЗ.Номенклатура = СтрИТЗ.Номенклатура;
			СтрПТЗ.Артикул = СтрИТЗ.Артикул;
			СтрПТЗ.Характеристика = СтрИТЗ.Характеристика;
			СтрПТЗ.Цена = СтрИТЗ.Цена;
			СтрПТЗ.АкционныйТовар = СтрИТЗ.АкционныйТовар;
			СтрПТЗ.УжеСоСкидкой = Ложь;
			СтрПТЗ.АкцТоварУсловиеСкидки = Ложь;
			СтрПТЗ.ЧастьУсловияСкидкиСтрока = NULL;
				
		КонецЦикла; 	
	
	КонецЦикла; 
	
	Возврат ПодробнаяТЗ;

КонецФункции // ()


Функция ОпределитьКолвоСкидТоваровНеАкц(ТЗ)
	// 1 и 2 условие
	//КолвоНеакциозныхТоваров = 0;
	СуммаНеакционныхТоваров = 0;
	Для каждого СтрокаТЗ Из ТЗ Цикл
		Если НЕ СтрокаТЗ.АкционныйТовар Тогда				
			//КолвоНеакциозныхТоваров = КолвоНеакциозныхТоваров + 1;
			СуммаНеакционныхТоваров = СуммаНеакционныхТоваров + СтрокаТЗ.Цена;
		КонецЕсли; 			
	КонецЦикла; 		
	КолвоСкидочныхТоваров = Цел(СуммаНеакционныхТоваров / 1500);
	Возврат КолвоСкидочныхТоваров;
КонецФункции // ()

Функция УстановитьСкидкиБезНеАкцТоваров(ПодробнаяТЗ, ТаблицаСкидок, СтрокаДереваСкидок)
	
	ТолькоАкцТовары = ПолучитьТЗТолькоАкцТоваров(ПодробнаяТЗ);
	
	СуммаАкцТоваров = 0;
	Для Индекс = 0 По ТолькоАкцТовары.Количество() - 1 Цикл
		
		Если НЕ ТолькоАкцТовары[Индекс].УжеСоСкидкой Тогда
			
			СуммаАкцТоваров = СуммаАкцТоваров + ТолькоАкцТовары[Индекс].Цена;
			
			Если СуммаАкцТоваров >= 1500 Тогда
				Попытка
					
					Проверка = ТолькоАкцТовары[Индекс + 1];
					ТолькоАкцТовары[Индекс].АкцТоварУсловиеСкидки = Истина;
					НоваяСтрока = ТаблицаСкидок.Добавить();
					НоваяСтрока.СкидкаНаценка = СтрокаДереваСкидок.СкидкаНаценка;
					НоваяСтрока.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.ВнешняяОбработка;
					НоваяСтрока.РеквизитДопУпорядочивания = СтрокаДереваСкидок.РеквизитДопУпорядочивания;
					НоваяСтрока.КлючСвязи = ТолькоАкцТовары[Индекс + 1].КлючСвязи;
					НоваяСтрока.Сумма = ТолькоАкцТовары[Индекс + 1].Цена - 499;
					НоваяСтрока.СуммаВсехСкидок = НоваяСтрока.Сумма;
					ТолькоАкцТовары[Индекс + 1].УжеСоСкидкой = Истина;	
					
				Исключение
					Сообщить("ВНИМАНИЕ: У покупателя имеется возможность купить игрушку из коллекции TY Beanie за 499р.");
				КонецПопытки; 
			Иначе		
				Продолжить;	
			КонецЕсли;	
			
		КонецЕсли; 
		
	КонецЦикла; 
	
КонецФункции // ()

Функция ПолучитьТЗТолькоАкцТоваров(ПодробнаяТЗ)
	
	ТолькоАкцТовары = Новый ТаблицаЗначений;
	
	Для Индекс = 0 По ПодробнаяТЗ.Колонки.Количество() - 1 Цикл
		ТолькоАкцТовары.Колонки.Добавить(ПодробнаяТЗ.Колонки[Индекс].Имя, ПодробнаяТЗ.Колонки[Индекс].ТипЗначения);	
	КонецЦикла; 

	Для каждого СтрПТЗ Из ПодробнаяТЗ Цикл
	
		Если СтрПТЗ.АкционныйТовар Тогда
		
			СтрТАТ = ТолькоАкцТовары.Добавить();
			СтрТАТ.КлючСвязи = СтрПТЗ.КлючСвязи;
			СтрТАТ.Номенклатура = СтрПТЗ.Номенклатура;
			СтрТАТ.Артикул = СтрПТЗ.Артикул;
			СтрТАТ.Характеристика = СтрПТЗ.Характеристика;
			СтрТАТ.Цена = СтрПТЗ.Цена;
			СтрТАТ.АкционныйТовар = СтрПТЗ.АкционныйТовар;
			СтрТАТ.УжеСоСкидкой = СтрПТЗ.УжеСоСкидкой;
			СтрТАТ.АкцТоварУсловиеСкидки = СтрПТЗ.АкцТоварУсловиеСкидки;
			СтрТАТ.ЧастьУсловияСкидкиСтрока = NULL;
		
		КонецЕсли; 	
	
	КонецЦикла;
	
	ТолькоАкцТовары.Сортировать("Цена УБЫВ");
	
	Возврат ТолькоАкцТовары;
	
КонецФункции // ()
 
 

// не используется
Функция ОпределитьКолвоСкидТоваровАкц(ТЗ)

	СуммаАкционныхТоваров = 0;
	Для каждого СтрокаТЗ Из ТЗ Цикл	
		Если СтрокаТЗ.АкционныйТовар Тогда
			Для Индекс = 0 По СтрокаТЗ.Количество - 1 Цикл
				СуммаАкционныхТоваров = СуммаАкционныхТоваров + СтрокаТЗ.Цена;	
			КонецЦикла; 	
		КонецЕсли; 
	КонецЦикла; 
	КолвоСкидочныхТоваров = Цел(СуммаАкционныхТоваров / 1500);
	Возврат КолвоСкидочныхТоваров;
КонецФункции // ()
 
 